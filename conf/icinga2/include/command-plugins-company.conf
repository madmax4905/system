/******************************************************************************
 * Icinga 2                                                                   *
 * Copyright (C) 2012-2017 Icinga Development Team (https://www.icinga.com/)  *
 *                                                                            *
 * This program is free software; you can redistribute it and/or              *
 * modify it under the terms of the GNU General Public License                *
 * as published by the Free Software Foundation; either version 2             *
 * of the License, or (at your option) any later version.                     *
 *                                                                            *
 * This program is distributed in the hope that it will be useful,            *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of             *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              *
 * GNU General Public License for more details.                               *
 *                                                                            *
 * You should have received a copy of the GNU General Public License          *
 * along with this program; if not, write to the Free Software Foundation     *
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.             *
 ******************************************************************************/
 /*
 lrwxrwxrwx 1 root   root     26 Oct 27  2017 include -> /usr/share/icinga2/include
lrwxrwxrwx 1 root   root     25 Oct 27  2017 plugins -> /usr/lib64/nagios/plugins
 */
template CheckCommand "rds-common" {
        command = [ PluginDir + "/pmp-check-aws-rds.py" ]

        arguments = {
                "-n" = {
                        value = "$rds_profile$"
                        description = "AWS profile from ~/.boto or /etc/boto.cfg. Default:None, fallbacks to '[Credentials]'"
                }
                "-r" = {
                        value = "$rds_region$"
                        description = "AWS region. Default: us-east-1. If set to 'all', we try to detect the instance region across all of them, note this will be slower than if you specify the region explicitly."
                }
                "-i" = {
                        value = "$rds_ident$"
                        description = "DB instance identifier"
                }
                "-m" = {
                        value = "$rds_metric$"
                        description = "metric to check: [status, load, storage, memory]"
                }
                "-w" = {
                        value = "$rds_warn$"
                        description = "warning threshold"
                }
                "-c" = {
                        value = "$rds_crit$"
                        description = "critical threshold"
                }
                "-u" = {
                        value = "$rds_unit$"
                        description = "unit of thresholds for 'storage' and 'memory' metrics: [percent, GB]. Default: percent"
                }
        }
}

object CheckCommand "rds-status" {
        import "rds-common"

        vars.rds_metric = "status"
}

object CheckCommand "rds-load" {
        import "rds-common"

        vars.rds_metric = "load"
        vars.rds_warn = "90,87,85"
        vars.rds_crit = "95,93,90"
}

object CheckCommand "rds-memory" {
        import "rds-common"

        vars.rds_metric = "memory"
        vars.rds_unit = "percent"
        vars.rds_warn = 10
        vars.rds_crit = 5
}

object CheckCommand "rds-storage" {
        import "rds-common"

        vars.rds_metric = "storage"
        vars.rds_unit = "percent"
        vars.rds_warn = 20
        vars.rds_crit = 5
}

object CheckCommand "http_json" {
        import "plugin-check-command"
        command = [ PluginDir + "/check_http_json.py" ]
        arguments = {
                "--host" = {
                        value = "$address$"
                        description = "Hostname or address of the interface to query"
                        required = true
                }
                "--port" = {
                        value = "$http_json_port$"
                        description = "TCP port number"
                }
                "--path" = {
                        value = "$http_json_path$"
                        description = "URL path to query (i.e.: /v1/service/xyz)"
                }
                "--timeout" = {
                        value = "$http_json_timeout$"
                        description = "Connection timeout (seconds)"
                }
                "--basic-auth" = {
                        value = "$http_json_basic_auth$"
                        description = "Basic auth string 'username:password'"
                }
                "--ssl" = {
                        set_if = "$http_json_ssl$"
                        description = "use TLS to connect to remote host"
                }
                "--insecure" = {
                        set_if = "$http_json_insecure$"
                        description = "do not check server SSL certificate"
                }
                "--cacert" = {
                        value = "$http_json_cacert_file$"
                        description = "path of cacert file to validate server cert"
                }
                "--cert" = {
                        value = "$http_json_cert_file$"
                        description = "client certificate in PEM format"
                }
                "--key" = {
                        value = "$http_json_key_file$"
                        description = "client certificate key file in PEM format ( if not bundled into the cert )"
                }
                "--data" = {
                        value = "$http_json_post_data$"
                        description = "the http payload to send as a POST"
                }
                "--headers" = {
                        value = "$http_json_headers$"
                        description = "additional http headers in JSON format to send with the request"
                }
                "--field_separator" = {
                        value = "$http_json_field_separator$"
                        description = "JSON Field separator, defaults to '.'; Select element in an array with '(' ')'"
                }
                "--value_separator" = {
                        value = "$http_json_value_separator$"
                        description = "JSON Value separator, defaults to ':'"
                }
                "--warning" = {
                        value = "$http_json_warning$"
                        description = "Warning threshold for these values, WarningRange is in the format [@]start:end"
                }
                "--critical" = {
                        value = "$http_json_critical$"
                        description = "Critical threshold for these values, CriticalRange is in the format [@]start:end"
                }
                "--key_exists" = {
                        value = "$http_json_key_exists$"
                        description = "Checks existence of these keys to determine status. Return warning if key is not present."
                }
                "--key_exists_critical" = {
                        value = "$http_json_key_exists_critical$"
                        description = "Checks existence of these keys to determine status. Return critical if key is not present."
                }
                "--key_equals" = {
                        value = "$http_json_key_equals$"
                        description = "Checks equality of these keys and values. Return warning if equality check fails"
                }
                "--key_equals_critical" = {
                        value = "$http_json_key_equals_critical$"
                        description = "Checks equality of these keys and values. Return critical if equality check fails"
                }
                "--key_equals_unknown" = {
                        value = "$http_json_key_equals_unknown$"
                        description = "Checks equality of these keys and values. Return unknown if equality check fails"
                }
                "--key_not_equals" = {
                        value = "$http_json_key_not_equals$"
                        description = "Checks equality of these keys and values (key[>alias],value key2,value2) to determine status. Multiple key values can be delimited with colon (key,value1:value2). Return warning if equality check succeeds."
                }
                "--key_not_equals_critical" = {
                        value = "$http_json_key_not_equals_critical$"
                        description = "Checks equality of these keys and values (key[>alias],value key2,value2) to determine status. Multiple key values can be delimited with colon (key,value1:value2). Return critical if equality check succeeds."
                }
                "--key_metric" = {
                        value = "$http_json_key_metric$"
                        description = "Gathers the values of these keys"
                }
        }
        vars.http_json_ssl = true
        vars.http_json_insecure = true
        vars.http_json_key_metric = "ccu"
}

object CheckCommand "gamepot-ccu" {
        import "plugin-check-command"
        command = [ PluginDir + "/check_gamepot_ccu.py" ]
        arguments = {
                "--projectid" = {
                        value = "$projectid$"
                        required = true
                }
                "--apikey" = {
                        value = "$apikey$"
                        required = true
                }
                "--ccu_warning" = {
                        value = "$ccu_warning$"
                }
                "--ccu_critical" = {
                        value = "$ccu_critical$"
                        required = true
                }
        }
        vars.ccu_warning = 3000
        vars.ccu_critical = 5000
}

object CheckCommand "pubsdk-ccu" {
        import "plugin-check-command"
        command = [ PluginDir + "/check_pubsdk_ccu.py" ]
        arguments = {
                "--appid" = {
                        value = "$appid$"
                        required = true
                }
                "--ccu_warning" = {
                        value = "$ccu_warning$"
                }
                "--ccu_critical" = {
                        value = "$ccu_critical$"
                        required = true
                }
        }
        vars.ccu_warning = 3000
        vars.ccu_critical = 5000
}


